.section    .text
.globl Interrupt_Install_Table

Interrupt_Install_Table:
    push {r0-r10,lr}
	ldr		r0, =IntTable
	mov		r1, #0x00000000
	ldmia	r0!, {r2-r9}	// load the first 8 words and store at the 0 address
	stmia	r1!, {r2-r9}
	ldmia	r0!, {r2-r9}	// load the second 8 words and store at the next address
	stmia	r1!, {r2-r9}
	mov		r0, #0xD2		// switch to IRQ mode and set stack pointer
	msr		cpsr_c, r0
	mov		sp, #0x8000
	mov		r0, #0xD3		// switch back to Supervisor mode, set the stack pointer
	msr		cpsr_c, r0
	mov		sp, #0x8000000
    pop {r0-r10,lr}
	bx		lr

Something:
    ldr  r0, =0x3F003010	// clear bit in the event detect register
	mov	 r1, #2
	str	 r1, [r0]
	ldr	r0, =0x3F00B210		//Enable clock IRQ interupts
	ldr	r1, [r0]			//The contents into r1
	mov r1, #10			//Enable bit 1 for c1 interupts
	str	r1, [r0]			//And store it back
	mrs	r0, cpsr 			//Enable IRQ interupts
	bic	r0, #0x80
	msr	cpsr_c, r0




.globl irq
irq:
    push {r0-r12,lr}
    ldr r0, =0x3F00B200
    ldr r1, [r0]
    ldr r0, =0x200
    tst r1, r0
    beq irqEnd
    ldr r0, =0x3F00B204
    ldr r1, [r0]
    ldr r0, =0x00000002
    tst r1, r0
    beq irqEnd

    ldr r0, =pauseState
    ldr r4, [r0]
    cmp r4, #1
    beq irqEnd
    ldr r0, =valuePack
    ldr r0, [r0]
    ldr r1, =valuePack
    ldr r1, [r1,#4]
    bl drawValuePack

irqEnd:
    ldr r0, =0x3F003000
    ldr r1, =0x002
    str r1, [r0]
    pop {r0-r12, lr}
    subs pc, lr, #4


.section    .data

.globl IntTable
IntTable:
	ldr		pc, reset_handler
	ldr		pc, undefined_handler
	ldr		pc, swi_handler
	ldr		pc, prefetch_handler
	ldr		pc, data_handler
	ldr		pc, unused_handler
	ldr		pc, irq_handler
	ldr		pc, fiq_handler

reset_handler:		.word Interrupt_Install_Table
undefined_handler:	.word hang
swi_handler:		.word hang
prefetch_handler:	.word hang
data_handler:		.word hang
unused_handler:		.word hang
irq_handler:		.word irq
fiq_handler:		.word 

